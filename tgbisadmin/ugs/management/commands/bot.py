from django.core.management.base import BaseCommand
from django.conf import settings
from telegram import KeyboardButton
from telegram import ReplyKeyboardMarkup
from telegram import InlineKeyboardButton
from telegram import InlineKeyboardMarkup
from telegram.ext import Filters
from telegram.ext import MessageHandler
from telegram.ext import Updater
from telegram.update import Update
from telegram.ext.callbackcontext import CallbackContext
from telegram.bot import Bot
from telegram.ext import CommandHandler
from telegram.ext import CallbackQueryHandler
from telegram.utils.request import Request
from ugs.models import Profile
from ugs.models import WebinarsDjango
from ugs.models import Registers
from ugs.models import Videos
import logging
import threading
from django.utils import timezone
import time
import configNames
from ugs.func import handler
from datetime import datetime, timedelta
from ugs.func import keyboards
# from apiclient.bizon365 import Webinars
import os
logger = logging.getLogger(__name__)
def log_errors(f):

    def inner(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except Exception as e:
            error_message = f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}'
            print(error_message)
            logger.error(f'{e}')

            raise e
    return inner


@log_errors
def do_contact(update: Update, context: CallbackContext):
    profile = Profile.objects.get(external_id = update.message.chat_id)
    profile.profileNum = update.message.contact.phone_number
    profile.save()
    logger.info(update.message.contact.phone_number)
    do_start(update=update, context=context)


@log_errors
def WebinarCheck(update, context):
    threading.Timer(60.0, WebinarCheck, args=[update, context]).start()
    # print(1)
    timeNow = timezone.now()

    statusProfile = False
    # –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–∏–∑–æ–Ω—É

    for register in Registers.objects.all().filter():
        if register.userStatus == '–ù–µ –ø—Ä–∏—à–µ–ª –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä':

            context.bot.send_message(
                chat_id=register.userID,
                text='–ü—Ä–∏–≤–µ—Ç! –ñ–∞–ª—å, —á—Ç–æ —É –í–∞—Å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ—Å–ª—É—à–∞—Ç—å –Ω–∞—à –≤–µ–±–∏–Ω–∞—Ä.'


            )
            time.sleep(3)
            context.bot.send_message(
                chat_id=register.userID,
                text=
                     '\n\n–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ. –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å—å –ø–æ —Å—Å—ã–ª–∫–µ:'


            )
            time.sleep(2)
            context.bot.send_message(
                chat_id=register.userID,
                text=
                     f'\n{WebinarsDjango.objects.get(webinarID=register.userWebinar).webinarVideoUrl}'

            )
            register.userStatus = '–ù–µ—Ç'
            register.delete()

        elif register.userStatus == '–ü—Ä–∏—à–µ–ª –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä':
            context.bot.send_message(
                chat_id=register.userID,
                text=f'–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ—Å–µ—Ç–∏–ª–∏ –Ω–∞—à –≤–µ–±–∏–Ω–∞—Ä!'

            )
            time.sleep(2)
            context.bot.send_message(
                chat_id=register.userID,
                text=f'–ò—Å–∫—Ä–µ–Ω–Ω–µ –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –¥–ª—è –≤–∞—Å –ø–æ–ª–µ–∑–Ω–æ–π.'

            )
            time.sleep(3)
            context.bot.send_message(
                chat_id=register.userID,
                text=f'–ú—ã –æ–±–µ—â–∞–ª–∏ –≤–∞–º –ø–æ–¥–∞—Ä–æ–∫ ¬´–†–µ–≥–ª–∞–º–µ–Ω—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ –∫–æ–º–ø–∞–Ω–∏–π¬ª, –æ—Ç–ø—Ä–∞–≤–ª—è—é.'

            )

            path = os.path.dirname(__file__)
            path = os.path.join(path, '–†–µ–≥–ª–∞–º–µ–Ω—Ç –æ—Ü–µ–Ω–∫–∏.pdf')
            f = open(path, 'rb')
            context.bot.send_document(
                chat_id=register.userID,
                document=f
            )

            register.userStatus = '–ù–µ—Ç'
            register.delete()

        elif register.userStatus == '–ò–Ω—Ç–µ—Ä–µ—Å':
            context.bot.send_message(
                chat_id=register.userID,
                text=f'‚ù§–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?‚ù§',
                reply_markup=keyboards.get_base_intresting_keyboard(),

            )
            register.userStatus = '–æ–ø—Ä–æ—Å'
            register.userReason = '–û—Ç–≤–µ—á–∞–µ—Ç'
            register.save()
            pass

    for webinar in WebinarsDjango.objects.all().filter():
        timeToGo = (divmod((webinar.webinarDateTime - timeNow).days * 86400 + (webinar.webinarDateTime - timeNow).seconds, 60))[0]
        print(timeToGo)
        if timeToGo == 30:
            logger.info(f'30 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –≤–µ–±–∏–Ω–∞—Ä–∞{webinar.webinarID}')
            try:
                for person in Registers.objects.all().filter(userWebinar = webinar.webinarID):
                    context.bot.send_message(
                            chat_id=person.userID,
                            text=f'–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –≤—ã –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏—Å—å –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä ¬´{webinar.webinarTitle}¬ª.'

                        )
                    time.sleep(3)
                    context.bot.send_message(
                        chat_id=person.userID,
                        text=f'–û–Ω –ø—Ä–æ–π–¥—ë—Ç —Å–µ–≥–æ–¥–Ω—è –≤ {webinar.webinarDateTime.time()}'

                    )
                    time.sleep(2)
                    context.bot.send_message(
                        chat_id=person.userID,
                        text=f'–í–æ—Ç —Å—Å—ã–ª–∫–∞:'

                    )
                    time.sleep(2)
                    context.bot.send_message(
                        chat_id=person.userID,
                        text=f'{webinar.webinarUrl}'

                    )
            except Registers.DoesNotExist:
                logger.info('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑—Ä–∏—Ç–µ–ª—è...')
        # elif timeToGo == 15:
        #     logger.info(f'15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –≤–µ–±–∏–Ω–∞—Ä–∞{webinar.webinarID}')
        #     # print(1)
        #     try:
        #         for person in Registers.objects.all().filter(userWebinar = webinar.webinarID):
        #             context.bot.send_message(
        #                     chat_id=person.userID,
        #                     text=f'{person.userName}.\n–î–æ –Ω–∞—á–∞–ª–∞ –≤–µ–±–∏–Ω–∞—Ä–∞ üí•{webinar.webinarTitle}üí• –æ—Å—Ç–∞–µ—Ç—Å—è 15 –º–∏–Ω—É—Ç, –ª–æ–≤–∏—Ç–µ —Å—Å—ã–ª–∫—É!\n\nüëâüèªüëâüèª{webinar.webinarUrl}üëàüèªüëàüèª\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!'
        #
        #                 )
        #     except Registers.DoesNotExist:
        #         logger.info('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑—Ä–∏—Ç–µ–ª—è...')
        elif timeToGo == 0:
            pass
        elif timeToGo == -120:
            pass
    pass


@log_errors
def sendVideo(update: Update, context: CallbackContext, videoTitle):
    chat_id = update.message.chat_id
    video = Videos.objects.get(videoTitle = videoTitle)
    context.bot.send_message(
                chat_id     = chat_id,
                text        = f'‚ùï ``{video.videoTitle}``'
                              f'‚ùï ``\n{video.videoDescription}``'
                              f'\n{video.videoUrl}',
        parse_mode          = 'Markdown',
            )

@log_errors
def Register(update: Update, context: CallbackContext):

    chat_id      = update.message.chat_id
    profile      = Profile.objects.get(external_id=chat_id)
    Registers.objects.get_or_create(userID = chat_id, userWebinar = profile.webinarIDRegister)
    registerUser = Registers.objects.get(userID = chat_id, userWebinar = profile.webinarIDRegister)
    if update.message.text != '–î–∞, —Ö–æ—á—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è':

            registerUser.userName = profile.name
            registerUser.userNum = profile.profileNum
            registerUser.userMail = update.message.text
            registerUser.save()
            profile.userQuestion = 0
            profile.webinarIDRegister = 0
            profile.save()

            context.bot.send_message(
                chat_id     = update.effective_chat.id,
                text        = '–ë–ª–∞–≥–æ–¥–∞—Ä—é.'
                )
            time.sleep(0.5)
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text='Ô∏è‚≠êÔ∏è‚≠êÔ∏è–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä!Ô∏è‚≠êÔ∏è‚≠êÔ∏è',
            )
            time.sleep(2)

            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text='–í—ã —Å–ª—ã—à–∞–ª–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ IMPACT Capital?',
                reply_markup=keyboards.get_base_check_impact_info_keyboard(),
            )

            # context.bot.send_message(
            #     chat_id=update.effective_chat.id,
            #     text='–ê –ø–æ–∫–∞ –≤—ã –µ–≥–æ –∂–¥—ë—Ç–µ, —É—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –≤–∞–º –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω:',
            #     reply_markup=keyboards.get_base_waiting_videos_keyboard(),
            # )

            # sendVideo(videoTitle = '–í–∏–¥–µ–æ1', update=update, context=context)
            logger.info(f'–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä {registerUser.userWebinar}')

    else:

        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É:',
        )


@log_errors
def do_start(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    name = update.message.from_user.username
    if update.message.text != None and '/start ' in update.message.text:
        try:
            profile = Profile.objects.get(external_id=chat_id)

        except Profile.DoesNotExist:
            tg_unicode = update.message.text.replace('/start ', '')
            p, _ = Profile.objects.get_or_create(
                external_id=chat_id,
                user_tg_parameteres_id = tg_unicode

            )
    profile = Profile.objects.get(external_id=chat_id)
    profile.webinarIDRegister = 0
    profile.userQuestion = 0
    profile.save()

    if profile.profileNum == '0':
        context.bot.send_message(chat_id=chat_id,
                                 text=
                                      f'–ü—Ä–∏–≤–µ—Ç, —è —á–∞—Ç-–±–æ—Ç IMPACT-Bot!',
                                 )

        context.bot.send_message(chat_id=chat_id,
                                 text=
                                 f'–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä, –æ—Å—Ç–∞–≤—å—Ç–µ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.',
                                 reply_markup=keyboards.get_contact_keyboard())
    elif profile.name == '–ù–µ—Ç':
        context.bot.send_message(chat_id=chat_id,
                                 text=
                                 f'–•–æ—Ä–æ—à–æ. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?',
                                 )

    else:
        context.bot.send_message(chat_id=chat_id,
                                 text=
                                 f'–ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ —Ç—ã –∫ –Ω–∞–º –∑–∞–≥–ª—è–Ω—É–ª!'
                                 f'\n–í–ø–µ—Ä–µ–¥–∏ —É –Ω–∞—Å –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–µ–±–∏–Ω–∞—Ä–æ–≤, –≤—ã–±–∏—Ä–∞–π!',
                                 reply_markup=keyboards.get_base_menu_keyboard())

    # bot.send_message(chat_id=chat_id,
    #                  text="–ü—Ä–∏–≤–µ—Ç, –æ—Ç–∫—É–¥–∞ —Ç—ã –ø—Ä–∏—à—ë–ª?",
    #                  C=get_base_inline_keyboard(),
    #                  )

@log_errors
def questions(update: Update, context: CallbackContext):
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=' –î–ª—è –Ω–∞—á–∞–ª–∞, –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å".',
        reply_markup=keyboards.get_base_reply_keyboard(),
    )
    # print(profile.numquestion)
    # print(Question.objects.count())


@log_errors
def do_check(update: Update, context: CallbackContext):

    chat_id = update.message.chat_id
    text    = update.message.text

    # p, _ =Profile.objects.get_or_create(
    #     external_id = chat_id,
    #     defaults= {'name': update.message.from_user.username,
    #                }
    # )
    try:
        profile = Profile.objects.get(external_id = chat_id)

    except Profile.DoesNotExist:
        do_start(update=update, context=context)

    if profile.profileNum == 0:
        do_start(update=update, context=context)
    elif text == 'AdmStart2034':
        logger.info('–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã')
        WebinarCheck(update=update, context=context)
    elif profile.name == '–ù–µ—Ç':
        profile.name = text
        profile.save()
        return do_start(update=update, context=context)
    elif text == 'AdminImpact20204040':
        profile.userStatus = '–ê–¥–º–∏–Ω'
        profile.save()
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!', )
        logger.info(f'–î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω {profile.external_id}')
    elif text == 'testAdm20':
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='‚ù§–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?‚ù§',
            reply_markup=keyboards.get_base_intresting_keyboard(),
        )

    elif text == configNames.CHOOSE_WEBINAR:
        return handler.send_keyborad_webinar(update=update, context=context)
    elif text == configNames.YES_I_WANT_REGISTER:
        return Register(update=update, context=context)
    elif text == configNames.NO_SEE_MORE:
        profile.webinarIDRegister = 0
        profile.save()
        return handler.send_keyborad_webinar(update=update, context=context)

    elif text == configNames.REASON_NO_INTERESTING:
        return handler.save_reason(update=update, context=context, reason = text)
    elif text == '–ü–æ–º–µ–Ω—è–ª–∏—Å—å –ø–ª–∞–Ω—ã':
        return handler.save_reason(update=update, context=context, reason=text)
    elif text == '–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª—Å—è, –∫–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ–±–∏–Ω–∞—Ä':
        return handler.save_reason(update=update, context=context, reason=text)
    elif text == '–î–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ':
        return handler.get_info_webinar(update=update, context=context)
    elif text == '–ù–µ—Ç. –ü—Ä–∏–º–µ—Ä–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é':
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f'–û—Ç–ª–∏—á–Ω–æ\n\nüö®`–ñ–µ–ª–∞–µ—Ç–µ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?`üö®',
            reply_markup=keyboards.get_base_reply_keyboard(),
            parse_mode="Markdown")
    elif text == '–î–∞, —Å–ª—ã—à–∞–ª':
        reg = Registers.objects.filter(userID=update.effective_chat.id, userStatus='–ù–µ—Ç').first()

        reg.user_know_impact = text
        reg.save()

        profile.userStatus = '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –æ—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?'
        profile.save()
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f'–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –æ—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?',
            )
        pass
    elif text == '–ù–µ—Ç, –Ω–µ —Å–ª—ã—à–∞–ª':
        return handler.get_info_impact(update=update, context=context)
        pass
    elif text == '–î–∞‚òë':
        reg = Registers.objects.filter(userID=update.effective_chat.id, userStatus='–ù–µ—Ç').first()

        reg.user_know_investion = '–î–∞, –∑–Ω–∞–µ—Ç'
        reg.save()
        return handler.get_check_investion_currently(update=update, context=context)
        pass
    elif text == '–ù–µ—Ç‚úñ':
        reg = Registers.objects.filter(userID=update.effective_chat.id, userStatus='–ù–µ—Ç').first()

        reg.user_know_investion = '–ù–µ—Ç, –Ω–µ –∑–Ω–∞–µ—Ç'
        reg.save()
        return handler.get_save_investion(update=update, context=context)

    elif text == 'IT':
        reg = Registers.objects.filter(userID=update.effective_chat.id, userStatus='–ù–µ—Ç').first()

        reg.user_who_know_investion_currently = text
        reg.save()
        return handler.get_save_investion(update=update, context=context)
        pass
    elif text == '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å':
        reg = Registers.objects.filter(userID=update.effective_chat.id, userStatus='–ù–µ—Ç').first()

        reg.user_who_know_investion_currently = text
        reg.save()
        return handler.get_save_investion(update=update, context=context)
        pass
    elif text == 'Retail':
        reg = Registers.objects.filter(userID=update.effective_chat.id, userStatus='–ù–µ—Ç').first()

        reg.user_who_know_investion_currently = text
        reg.save()
        return handler.get_save_investion(update=update, context=context)
        pass

    else:
        if profile.userStatus == '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –æ—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?':
            reg = Registers.objects.filter(userID=update.effective_chat.id, userStatus='–ù–µ—Ç').first()
            reg.user_who_know_impact = text
            profile.userStatus = '–ù–µ—Ç'
            reg.save()
            profile.save()
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f'C–ø–∞—Å–∏–±–æ, –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç',
            )
            return handler.get_check_investion(update=update, context=context)
        reg = Registers.objects.filter(userID = update.effective_chat.id, userStatus = '–æ–ø—Ä–æ—Å').first()

        if reg == None:
            if profile.webinarIDRegister != 0:
                return Register(update=update, context=context)
            else:
                return do_start(update=update, context=context)
        else:
            if reg.userReason == '–û—Ç–≤–µ—á–∞–µ—Ç':
                return handler.save_reason(update=update, context=context, reason = text)

            else:
                if profile.webinarIDRegister != 0:
                    return Register(update=update, context=context)
                else:
                    return do_start(update=update, context=context)


@log_errors
def keyboard_callback_handler(update: Update, context: CallbackContext):
    query                     = update.callback_query
    data                      = query.data
    # print(data)
    try:

        if 'o' in data:
            if data == 'Actions':
                return handler.save_interesting(update=update, context=context, interes = '–ê–∫—Ü–∏–∏ IMPACT Capital')
            elif data == 'Invension':
                return handler.save_interesting(update=update, context=context, interes='–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏')
            elif data == 'Portfel':
                return handler.save_interesting(update=update, context=context, interes='–ê—É–¥–∏—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è')

        else:
            return handler.get_webinar(update=update, context=context, data=data)
    except WebinarsDjango.DoesNotExist:

        videoSelected = Videos.objects.get(videoID=data)
        context.bot.send_message(

            chat_id=update.effective_chat.id,
            text=

            # f'`–í–∏–¥–µ–æ:` {videoSelected.videoTitle}'
            # f'\n\n‚ùó`–û–ø–∏—Å–∞–Ω–∏–µ:` {videoSelected.videoDescription}'
            f'{videoSelected.videoUrl}',
        )


# WebinarCheck(update=Update, context=CallbackContext)
class Command(BaseCommand):
    help = '–¢–µ–ª–µ–≥—Ä–∞–º - –±–æ—Ç'

    def handle(self, *args, **options):
        request = Request(
            connect_timeout=0.5,
            read_timeout=1.0,
        )
        bot = Bot(request=request,
                  token=settings.TOKEN)
        print(bot.get_me())

        updater = Updater(bot = bot,
                          use_context=True)
        start_handler = CommandHandler('start', do_start)
        contact_handler = MessageHandler(Filters.contact, do_contact)
        message_handler = MessageHandler(Filters.text, do_check)
        buttons_handler = CallbackQueryHandler(callback=keyboard_callback_handler, pass_chat_data=True)
        updater.dispatcher.add_handler(start_handler)
        updater.dispatcher.add_handler(message_handler)
        updater.dispatcher.add_handler(buttons_handler)
        updater.dispatcher.add_handler(contact_handler)

        updater.start_polling()
        updater.idle()
