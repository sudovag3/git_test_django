from django.core.management.base import BaseCommand
from django.conf import settings
from telegram import KeyboardButton
from telegram import ReplyKeyboardMarkup
from telegram import InlineKeyboardButton
from telegram import InlineKeyboardMarkup
from telegram.ext import Filters
from telegram.ext import MessageHandler
from telegram.ext import Updater
from telegram.update import Update
from telegram.ext.callbackcontext import CallbackContext
from telegram.bot import Bot
from telegram.ext import CommandHandler
from telegram.ext import CallbackQueryHandler
from telegram.utils.request import Request
from ugs.models import Profile
from ugs.models import WebinarsDjango
from ugs.models import Registers
from ugs.models import Videos
from ugs.models import Parameters
import logging
import threading
from django.utils import timezone
import time
import configNames
from ugs.func import keyboards
from amoCRM_update_lib import create_deal
from amoCRM_update_lib import link
from datetime import datetime, timedelta


def send_keyborad_webinar(update: Update, context: CallbackContext):
    listWithKeyboards    = []
    timeNow              = timezone.now()

    for i in WebinarsDjango.objects.all():
        timeToGo = (
            divmod((i.webinarDateTime - timeNow).days * 86400 + (i.webinarDateTime - timeNow).seconds,
                   60))[0]
        if timeToGo > 0:
            listWithKeyboards.append([InlineKeyboardButton(i.webinarTitle, callback_data=i.webinarID)])
    keyboard = InlineKeyboardMarkup(listWithKeyboards)

    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text='*–í–æ—Ç –∫–∞–∫–∏–µ –≤–µ–±–∏–Ω–∞—Ä—ã –º—ã –º–æ–∂–µ–º –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å‚¨á‚¨á‚¨á*',
        reply_markup=keyboard,
        parse_mode="Markdown",
    )

def save_reason(update: Update, context: CallbackContext, reason):
    reg = Registers.objects.filter(userID=update.effective_chat.id, userStatus='–æ–ø—Ä–æ—Å').first()
    reg.userStatus = '–ù–µ –ø—Ä–∏—à—ë–ª, –ø—Ä–∏—á–∏–Ω—É –æ–ø—Ä–µ–¥–µ–ª–∏–ª'
    reg.userReason = reason
    reg.save()
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—à–µ–º—É —É—á–∞—Å—Ç–∏—é –Ω–∞ –¥—Ä—É–≥–∏—Ö –Ω–∞—à–∏—Ö –≤–µ–±–∏–Ω–∞—Ä–∞—Ö',
        reply_markup=keyboards.get_base_menu_keyboard(),
    )

def save_interesting(update: Update, context: CallbackContext, interes):
    regist = Registers.objects.get(userID=update.effective_chat.id, userStatus='–æ–ø—Ä–æ—Å')
    regist.userReason = interes
    context.bot.send_message(

        chat_id=update.effective_chat.id,
        text='C–ø–∞—Å–∏–±–æ, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è, –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –Ω–∞ –Ω–∞—à–∏—Ö –≤–µ–±–∏–Ω–∞—Ä–∞—Ö',
        reply_markup=keyboards.get_base_menu_keyboard()
    )

def get_check_investion_currently(update: Update, context: CallbackContext):
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=
        f'–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–π —Å–µ–∫—Ç–æ—Ä –¥–ª—è –≤–∞—Å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ:',
        reply_markup=keyboards.get_base_investion_impact_info_currently_keyboard())

def get_check_investion(update: Update, context: CallbackContext):
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=
        f'–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –ø—Ä—è–º—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π?',
        reply_markup=keyboards.get_base_investion_impact_info_keyboard())

def get_save_investion(update: Update, context: CallbackContext):
    context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f'–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã, –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –Ω–∞ –Ω–∞—à–µ–º –≤–µ–±–∏–Ω–∞—Ä–µ!',

            )
    reg = Registers.objects.filter(userID=update.effective_chat.id, userStatus='–ù–µ—Ç').first()
    profile = Profile.objects.get(external_id=update.effective_chat.id)
    par = Parameters.objects.get(telegramIdLink = profile.user_tg_parameteres_id)

    prInfo =[{

        "custom_fields_values": [
            {
                "field_id": 133839,
                "values": [
                    {
                        "value": reg.userNum
                    }
                ]
            },
            {
                "field_id": 133841,
                "values": [
                    {
                        "value": reg.userMail
                    }
                ]
            },
            {
                "field_id": 685213,
                "values": [
                    {
                        "value": reg.userName
                    }
                ]
            },
            {
                "field_id": 667977,
                "values": [
                    {
                        "value": reg.user_know_investion
                    }
                ]
            },

            {
                "field_id": 685751,
                "values": [
                    {
                        "value": reg.user_know_impact
                    }
                ]
            },
            {
                "field_id": 685753,
                "values": [
                    {
                        "value": reg.user_who_know_impact
                    }
                ]
            }
        ]
    }]

    if reg.user_know_investion != '–ù–µ—Ç, –Ω–µ –∑–Ω–∞–µ—Ç':
        prInfo[0]["custom_fields_values"].append({
                "field_id": 675851,
                "values": [
                    {
                        "value": reg.user_who_know_investion_currently
                    }
                ]
            })

    regInfo =[{

        "pipeline_id": 3273697,
        "name": "–ó–∞—è–≤–∫–∞ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä",
        "custom_fields_values": [
        {
            "field_id": 675711,
            "values": [
                {
                    "value": par.utm_source
                }
            ]
        },
        {
            "field_id": 676523,
            "values": [
                {
                    "value": par.utm_medium
                }
            ]
        },
        {
            "field_id": 676525,
            "values": [
                {
                    "value": par.utm_campaign
                }
            ]
        },
        {
            "field_id": 676527,
            "values": [
                {
                    "value": par.utm_term
                }
            ]
        },
        {
            "field_id": 676529,
            "values": [
                {
                    "value": par.utm_content
                }
            ]
        },
        {
            "field_id": 676297,
            "values": [
                {
                    "value": par.roistat_visit
                }
            ]
        },]

    }]
    logging.info(link(create_deal(regInfo, 'leads')["_embedded"]["leads"][0]["id"], create_deal(prInfo, 'contacts')["_embedded"]["contacts"][0]["id"]))
    # logging.info(create_deal(regInfo, 'leads'))
    # logging.info(create_deal(prInfo, 'contacts'))
    time.sleep(2)

    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f'–ê –ø–æ–∫–∞ –≤—ã –µ–≥–æ –∂–¥—ë—Ç–µ, —É—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –≤–∞–º –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω:',
        reply_markup=keyboards.get_base_waiting_videos_keyboard()
    )


def get_info_impact(update: Update, context: CallbackContext):
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=
        f'–ö–æ–º–ø–∞–Ω–∏—è IMPACT Capital')
    time.sleep(2)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=
        f'–†–∞—Å—Å–∫–∞–∂—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö‚Ä¶ ',)
    time.sleep(2)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=
        f'–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ø–æ–∫—É–ø–∫–µ –¥–æ–ª–µ–π –≤ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö –Ω–∞ –†–∞—É–Ω–¥–µ-–ê')
    time.sleep(3.5)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=
        f'–ö–æ–≥–¥–∞ –ø—Ä–æ–µ–∫—Ç –ø—Ä–æ—à—ë–ª —Ç–æ—á–∫—É –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏, –Ω–æ –Ω–µ —Å—Ç–∞–ª –µ—â–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–º')
    time.sleep(3)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=
        f'–≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—Ç—å –¥–æ–ª–∏ –ø–æ –Ω–∞–∏–ª—É—á—à–µ–π –æ—Ü–µ–Ω–∫–µ')
    time.sleep(2.5)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=
        f'–ò –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø—Ä–∏—É–º–Ω–æ–∂–∞—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞–º –∏ –Ω–∞—à–∏–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º')
    time.sleep(3)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=
        f'–£ –Ω–∞—Å –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ —Ç–∞–∫–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∫–∞–∫:')
    time.sleep(1)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=
        f'‚öΩ–§—É—Ç–±–æ–ª—å–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è –ï–≥–æ—Ä–∞ –¢–∏—Ç–æ–≤–∞')
    time.sleep(1)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=
        f'üçïDodo Pizza')
    time.sleep(1)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=
        f'ü¶æTechnored')
    time.sleep(1)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=
        f'üç¨YogurtShop')
    time.sleep(1)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=
        f'üèµVananaPark')
    time.sleep(1)
    context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=
            f'–ù–æ –∏ –Ω–∞ —Ñ–æ–Ω–¥–æ–≤–æ–º —Ä—ã–Ω–∫–µ —É –Ω–∞—Å –µ—Å—Ç—å —á–µ–º –≥–æ—Ä–¥–∏—Ç—å—Å—è üòä')
    time.sleep(2)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=
        f'–ù–∞–ø—Ä–∏–º–µ—Ä, –≤ –ø–µ—Ä–∏–æ–¥ –ø–∞–Ω–¥–µ–º–∏–∏ –º—ã —Å–¥–µ–ª–∞–ª–∏ 105% –≥–æ–¥–æ–≤—ã—Ö')
    time.sleep(2)
    return get_check_investion(update=update, context=context)




def get_info_webinar(update: Update, context: CallbackContext):
    chat_id = update.effective_message.chat_id
    profile = Profile.objects.get(external_id=chat_id)
    webinarSelected = WebinarsDjango.objects.get(webinarID=profile.webinarIDRegister)

    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=
        f'–û—Ç–ª–∏—á–Ω–æ',
        parse_mode="Markdown")
    time.sleep(1)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=
        f'‚ùó`–ù–∞ —ç—Ç–æ–º –≤–µ–±–∏–Ω–∞—Ä–µ –≤—ã —É–∑–Ω–∞–µ—Ç–µ:`',
        parse_mode="Markdown")
    time.sleep(1)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=
        f'‚úÖ{webinarSelected.webinarDescription}', )
    time.sleep(1)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=
        f'‚úÖ{webinarSelected.webinarDescription2}', )
    time.sleep(1)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=
        f'‚úÖ{webinarSelected.webinarDescription3}', )
    time.sleep(1)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f'\n\nüö®`–ñ–µ–ª–∞–µ—Ç–µ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?`üö®',
        reply_markup=keyboards.get_base_reply_keyboard(),
        parse_mode="Markdown")

def get_webinar(update: Update, context: CallbackContext, data):
    webinarSelected = WebinarsDjango.objects.get(webinarID=data)
    chat_id = update.effective_message.chat_id
    profile = Profile.objects.get(external_id=chat_id)
    profile.webinarIDRegister = data
    profile.save()


    if profile.userStatus != '–ê–¥–º–∏–Ω':
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f'üíª –í—ã–±—Ä–∞–Ω–Ω—ã–π `–í–µ–±–∏–Ω–∞—Ä:` {webinarSelected.webinarTitle}',
            parse_mode="Markdown")
        time.sleep(0.3)

        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=
            f'–í–µ–±–∏–Ω–∞—Ä –ø—Ä–æ–π–¥—ë—Ç {webinarSelected.webinarDateTime.day} {configNames.MONTH_LIST[webinarSelected.webinarDateTime.month + 1]}'
            f'\n–°–æ–≤–µ—Ç: –î–æ–±–∞–≤—å—Ç–µ —Å–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å.',
            parse_mode="Markdown")
        time.sleep(1)
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=
                 '–†–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä–µ?',
            reply_markup=keyboards.get_base_check_webinar_keyboard())

        # context.bot.send_message(
        #
        #     chat_id=update.effective_chat.id,
        #     text=f'üíª`–í–µ–±–∏–Ω–∞—Ä:` {webinarSelected.webinarTitle}'
        #          f'\n\n‚ùó`–û–ø–∏—Å–∞–Ω–∏–µ:` {webinarSelected.webinarDescription}'
        #          f'\n\nüïë`–î–∞—Ç–∞`: {webinarSelected.webinarDateTime.date()}'
        #          f'\nüïë`–í—Ä–µ–º—è`: {webinarSelected.webinarDateTime.time()}'
        #          f'\n\nüö®`–ñ–µ–ª–∞–µ—Ç–µ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?`üö®',
        #     reply_markup=get_base_reply_keyboard(),
        #     parse_mode="Markdown")
    else:
        context.bot.send_message(

            chat_id=update.effective_chat.id,
            text=f'üíª`–í–µ–±–∏–Ω–∞—Ä:` {webinarSelected.webinarTitle}'
                 f'\n\n‚ùó`–û–ø–∏—Å–∞–Ω–∏–µ:` {webinarSelected.webinarDescription}'
                 f'\n\nüïë`–î–∞—Ç–∞`: {webinarSelected.webinarDateTime.date()}'
                 f'\nüïë`–í—Ä–µ–º—è`: {webinarSelected.webinarDateTime.time()}'
                 f'\n\nüö®`–ñ–µ–ª–∞–µ—Ç–µ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?`üö®',
            parse_mode="Markdown")
    # print(data)

